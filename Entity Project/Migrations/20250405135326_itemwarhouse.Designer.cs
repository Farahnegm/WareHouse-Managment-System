// <auto-generated />
using System;
using Entity_Project.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity_Project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250405135326_itemwarhouse")]
    partial class itemwarhouse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity_Project.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entity_Project.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Entity_Project.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Entity_Project.Models.ItemWarehouse", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ItemWarhouses");
                });

            modelBuilder.Entity("Entity_Project.Models.ReleaseOrder", b =>
                {
                    b.Property<int>("ReleaseOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReleaseOrderID"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SuppilerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WarehouseID")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ReleaseOrderID");

                    b.HasIndex("SuppilerName");

                    b.HasIndex("WarehouseID");

                    b.HasIndex("WarehouseName");

                    b.ToTable("ReleaseOrders");
                });

            modelBuilder.Entity("Entity_Project.Models.ReleaseOrderItem", b =>
                {
                    b.Property<int>("ReleaseOrderID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("ReleaseOrderID", "ItemID");

                    b.HasIndex("ItemID");

                    b.HasIndex("WarehouseId", "ItemID");

                    b.ToTable("ReleaseOrderItems");
                });

            modelBuilder.Entity("Entity_Project.Models.StockTransfer", b =>
                {
                    b.Property<int>("StockTransferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTransferID"));

                    b.Property<int>("DestinationWarehouseID")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("SourceWarehouseID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("StockTransferID");

                    b.HasIndex("DestinationWarehouseID");

                    b.HasIndex("ItemId");

                    b.HasIndex("SourceWarehouseID");

                    b.HasIndex("SupplierID");

                    b.ToTable("StockTransfers");
                });

            modelBuilder.Entity("Entity_Project.Models.StockTransferItem", b =>
                {
                    b.Property<int>("stockTransferID")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("stockTransferID", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("StockTransferItems");
                });

            modelBuilder.Entity("Entity_Project.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Entity_Project.Models.SupplyOrder", b =>
                {
                    b.Property<int>("SupplyOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplyOrderID"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WarehouseID")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SupplyOrderID");

                    b.HasIndex("SupplierID");

                    b.HasIndex("SupplierName");

                    b.HasIndex("WarehouseID");

                    b.HasIndex("WarehouseName");

                    b.ToTable("SupplyOrders");
                });

            modelBuilder.Entity("Entity_Project.Models.SupplyOrderItem", b =>
                {
                    b.Property<int>("SupplyOrderID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("SupplyOrderID", "ItemID");

                    b.HasIndex("ItemID");

                    b.HasIndex("WarehouseId", "ItemID");

                    b.ToTable("SupplyOrderItems");
                });

            modelBuilder.Entity("Entity_Project.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.Property<int?>("ResponsiblePersonId")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseLocation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("WarehouseID");

                    b.HasIndex("ResponsiblePersonId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("SupplierWarehouse", b =>
                {
                    b.Property<int>("SuppliersSupplierID")
                        .HasColumnType("int");

                    b.Property<int>("WarehousesWarehouseID")
                        .HasColumnType("int");

                    b.HasKey("SuppliersSupplierID", "WarehousesWarehouseID");

                    b.HasIndex("WarehousesWarehouseID");

                    b.ToTable("SupplierWarehouse");
                });

            modelBuilder.Entity("Entity_Project.Models.ItemWarehouse", b =>
                {
                    b.HasOne("Entity_Project.Models.Item", "Item")
                        .WithMany("ItemWarehouses")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Project.Models.Warehouse", "Warehouse")
                        .WithMany("ItemWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Entity_Project.Models.ReleaseOrder", b =>
                {
                    b.HasOne("Entity_Project.Models.Supplier", "Supplier")
                        .WithMany("ReleaseOrders")
                        .HasForeignKey("SuppilerName")
                        .HasPrincipalKey("SupplierName")
                        .IsRequired();

                    b.HasOne("Entity_Project.Models.Warehouse", null)
                        .WithMany("ReleaseOrders")
                        .HasForeignKey("WarehouseID");

                    b.HasOne("Entity_Project.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseName")
                        .HasPrincipalKey("WarehouseName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Entity_Project.Models.ReleaseOrderItem", b =>
                {
                    b.HasOne("Entity_Project.Models.Item", null)
                        .WithMany("ReleasePermits")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Project.Models.ReleaseOrder", "ReleaseOrder")
                        .WithMany("ReleaseOrderItems")
                        .HasForeignKey("ReleaseOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Project.Models.ItemWarehouse", "Item")
                        .WithMany()
                        .HasForeignKey("WarehouseId", "ItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ReleaseOrder");
                });

            modelBuilder.Entity("Entity_Project.Models.StockTransfer", b =>
                {
                    b.HasOne("Entity_Project.Models.Warehouse", "DestinationWarehouse")
                        .WithMany("DestinationTransfers")
                        .HasForeignKey("DestinationWarehouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity_Project.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Project.Models.Warehouse", "SourceWarehouse")
                        .WithMany("SourceTransfers")
                        .HasForeignKey("SourceWarehouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity_Project.Models.Supplier", "Supplier")
                        .WithMany("StoreTransfers")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("Item");

                    b.Navigation("SourceWarehouse");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entity_Project.Models.StockTransferItem", b =>
                {
                    b.HasOne("Entity_Project.Models.Item", "Item")
                        .WithMany("StockTransfers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Project.Models.StockTransfer", "Transfer")
                        .WithMany("StoreTransferItems")
                        .HasForeignKey("stockTransferID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("Entity_Project.Models.SupplyOrder", b =>
                {
                    b.HasOne("Entity_Project.Models.Supplier", null)
                        .WithMany("SupplyOrders")
                        .HasForeignKey("SupplierID");

                    b.HasOne("Entity_Project.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierName")
                        .HasPrincipalKey("SupplierName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity_Project.Models.Warehouse", null)
                        .WithMany("SupplyOrders")
                        .HasForeignKey("WarehouseID");

                    b.HasOne("Entity_Project.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseName")
                        .HasPrincipalKey("WarehouseName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Entity_Project.Models.SupplyOrderItem", b =>
                {
                    b.HasOne("Entity_Project.Models.Item", null)
                        .WithMany("SupplyPermits")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Project.Models.SupplyOrder", "SupplyOrder")
                        .WithMany("SupplyOrderItems")
                        .HasForeignKey("SupplyOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Project.Models.ItemWarehouse", "Item")
                        .WithMany()
                        .HasForeignKey("WarehouseId", "ItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SupplyOrder");
                });

            modelBuilder.Entity("Entity_Project.Models.Warehouse", b =>
                {
                    b.HasOne("Entity_Project.Models.Employee", "ResponsiblePerson")
                        .WithMany()
                        .HasForeignKey("ResponsiblePersonId");

                    b.Navigation("ResponsiblePerson");
                });

            modelBuilder.Entity("SupplierWarehouse", b =>
                {
                    b.HasOne("Entity_Project.Models.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SuppliersSupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Project.Models.Warehouse", null)
                        .WithMany()
                        .HasForeignKey("WarehousesWarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity_Project.Models.Item", b =>
                {
                    b.Navigation("ItemWarehouses");

                    b.Navigation("ReleasePermits");

                    b.Navigation("StockTransfers");

                    b.Navigation("SupplyPermits");
                });

            modelBuilder.Entity("Entity_Project.Models.ReleaseOrder", b =>
                {
                    b.Navigation("ReleaseOrderItems");
                });

            modelBuilder.Entity("Entity_Project.Models.StockTransfer", b =>
                {
                    b.Navigation("StoreTransferItems");
                });

            modelBuilder.Entity("Entity_Project.Models.Supplier", b =>
                {
                    b.Navigation("ReleaseOrders");

                    b.Navigation("StoreTransfers");

                    b.Navigation("SupplyOrders");
                });

            modelBuilder.Entity("Entity_Project.Models.SupplyOrder", b =>
                {
                    b.Navigation("SupplyOrderItems");
                });

            modelBuilder.Entity("Entity_Project.Models.Warehouse", b =>
                {
                    b.Navigation("DestinationTransfers");

                    b.Navigation("ItemWarehouses");

                    b.Navigation("ReleaseOrders");

                    b.Navigation("SourceTransfers");

                    b.Navigation("SupplyOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
